[
  {
    "algorithm": "3des",
    "strength": "128",
    "keywords": [
      "botan-3.dll",
      "botan.dll",
      "libbotan-3.dylib",
      "libbotan-2.dylib",
      "libbotan-3.so",
      "libbotan-2.so",
      "libbotan-2.s"
    ]
  },
  {
    "algorithm": "3way",
    "strength": "128",
    "keywords": [
      "3way.h",
      "CRYPTOPP_THREEWAY_H"
    ]
  },
  {
    "algorithm": "aes",
    "strength": "256",
    "keywords": [
      "GibberishAES",
      "aes.h",
      "tiny-AES-c",
      "AES_set_encrypt_key",
      "AES_set_decrypt_key",
      "AES_ige_encrypt",
      "AES_ofb128_encrypt",
      "AES_ecb_encrypt",
      "AES_cbc_encrypt",
      "AES_cfb8_encrypt",
      "AES_cfb128_encrypt",
      "AES_wrap_key",
      "AES_cfb1_encrypt",
      "AES_unwrap_key",
      "aes.js",
      "require('aes-js')",
      "require('sjcl')",
      "require('crypto-js');",
      "CryptoJS.AES.encrypt",
      "CryptoJS.AES.decryp",
      "<openssl/aes.h>",
      ".getInstance(\"AES\");",
      "module.exports = AES",
      "AES.prototype",
      "aes.AES",
      "AES/CBC/NoPadding",
      "AES/CBC/PKCS5Padding ",
      "AES/ECB/NoPadding",
      "AES/ECB/PKCS5Padding",
      "AES/GCM/NoPadding"
    ]
  },
  {
    "algorithm": "aria",
    "strength": "128",
    "keywords": [
      "aria.cpp",
      "aria.h",
      "r.re.nsri.aria",
      "ARIAEngine",
      "ossl_aria_set_encrypt_key",
      "ossl_aria_set_decrypt_key",
      "ossl_aria_encrypt",
      "#include <openssl/aria.h>",
      "ARIA_set_encrypt_key",
      "ARIA_encrypt",
      ".getInstance(\"ARIA/ECB/NoPadding\"",
      ".createCipheriv('ARIA-128-ECB'",
      "crypto/aria",
      "aria.NewCipher",
      "ARIA-128-ECB",
      "from Cryptodome.Cipher import ARIA",
      "ARIA.new("
    ]
  },
  {
    "algorithm": "ASN1",
    "strength": "256",
    "keywords": [
      "#include <openssl/asn1.h>",
      "ASN1_INTEGER_new",
      "import org.bouncycastle.asn1.ASN1Integer",
      "ASN1Integer",
      "forge.asn1.Class.UNIVERSAL",
      "from pyasn1.codec.der import encoder"
    ]
  },
  {
    "algorithm": "bcrypt",
    "strength": "320",
    "keywords": [
      "bcrypt",
      "pycabcrypt.h",
      "BCrypt.java",
      "jBCrypt"
    ]
  },
  {
    "algorithm": "blakex",
    "strength": "256/512",
    "keywords": [
      "blake3.h",
      "blake3_hasher_update",
      "blake3_impl.h",
      "BLAKE2b512",
      "BLAKE2b256",
      "blake2",
      "pycabcrypt.h"
    ]
  },
  {
    "algorithm": "blowfish",
    "strength": "320",
    "keywords": [
      "egoroof-blowfish",
      "blowfish"
    ]
  },
  {
    "algorithm": "blum-goldwasser",
    "strength": "320",
    "keywords": [
      "blumgoldwasser.py",
      "BlumGoldwasser",
      "sage.crypto.public_key.blum_goldwasser.BlumGoldwasser"
    ]
  },
  {
    "algorithm": "cast",
    "strength": "320",
    "keywords": [
      "CAST_ecb_encrypt",
      "CAST_encrypt",
      "CAST_decrypt",
      "CAST_cbc_encrypt",
      "CAST_set_key",
      "CAST3.h",
      "cast5.h",
      "pyCast6"
    ]
  },
  {
    "algorithm": "cmea",
    "strength": "64",
    "keywords": [
      "startCMEA",
      "CmeaSys"
    ]
  },
  {
    "algorithm": "cms",
    "strength": "64",
    "keywords": [
      "#include <openssl/cms.h>",
      "CMS_ContentInfo_new",
      "CMS_encrypt",
      "import org.bouncycastle.cms.",
      "CMSEnvelopedDataGenerator"
    ]
  },
  {
    "algorithm": "crc16",
    "strength": "16",
    "keywords": [
      "CRC_16",
      "CRC_16CCITT",
      "CRC_16XModem",
      "CRC16"
    ]
  },
  {
    "algorithm": "crc32",
    "strength": "32",
    "keywords": [
      "crc32h.h",
      "crc32.c",
      "crc32_table",
      "xcrc32"
    ]
  },
  {
    "algorithm": "camellia",
    "strength": "256",
    "keywords": [
      "camellia.core",
      "CIPHERCAMELLIA256",
      "CAMELLIA-256-CBC",
      "Camellia_cfb8_encrypt",
      "Camellia_ctr128_encrypt",
      "Camellia_set_key",
      "Camellia_EncryptBlock_Rounds",
      "Camellia_DecryptBlock",
      "Camellia_decrypt",
      "Camellia_DecryptBlock_Rounds",
      "Camellia_cfb128_encrypt",
      "Camellia_Ekeygen",
      "Camellia_EncryptBlock",
      "Camellia_cbc_encrypt",
      "Camellia_cfb1_encrypt",
      "Camellia_ecb_encrypt",
      "Camellia_encrypt",
      "Camellia_ofb128_encrypt"
    ]
  },
  {
    "algorithm": "chacha(salsa)",
    "strength": "256",
    "keywords": [
      "TLS_RSA_WITH_CHACHA20_SHA",
      "TLS_ECDHE_RSA_WITH_CHACHA20_SHA",
      "TLS_ECDHE_ECDSA_WITH_CHACHA20_SHA",
      "TLS_RSA_WITH_CHACHA20_POLY1305",
      "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 ",
      "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305",
      "TLS_DHE_RSA_WITH_CHACHA20_POLY1305",
      "TLS_DHE_PSK_WITH_CHACHA20_POLY1305",
      "TLS_PSK_WITH_CHACHA20_POLY1305",
      "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305",
      "TLS_RSA_PSK_WITH_CHACHA20_POLY1305",
      "chacha20_core",
      "ChaCha20_ctr32",
      "#include <openssl/chacha.h>",
      ".getInstance(\"ChaCha20\")",
      "createCipheriv('chacha20'",
      "golang.org/x/crypto/chacha20poly1305",
      "chacha20poly1305",
      "sodium_crypto_stream_xchacha20_xor",
      "from cryptography.hazmat.primitives.ciphers import ChaCha20",
      "ChaCha20Poly1305",
      "chacha_encrypt"
    ]
  },
  {
    "algorithm": "cobra",
    "strength": "128",
    "keywords": [
      "Cobra_algorithm",
      "cobra.java"
    ]
  },
  {
    "algorithm": "dcc",
    "strength": "64",
    "keywords": [
      "DCC.py"
    ]
  },
  {
    "algorithm": "des",
    "strength": "168",
    "keywords": [
      "des_setparity",
      "DESERR_NONE",
      "DES_encrypt",
      "DES_ncbc_",
      "DES_set_",
      "DES_ede3_",
      "DES_ecb_",
      "DES_pcbc_",
      "DES_cfb",
      "DES_cbc_",
      "DES_random_key",
      "DES_ecb3_",
      "DES_ofb",
      "DES_is_weak_key",
      "DES_check_key_parity",
      "DES_key_sched",
      "DES_crypt",
      "DES_quad_cksum",
      "DES_string_to_key",
      "DES_xcbc_",
      "DES_string_to_2keys",
      "DES_fcrypt",
      "DESede/CBC",
      "DESede/ECB"
    ]
  },
  {
    "algorithm": "desede",
    "strength": "168",
    "keywords": [
      "javax.crypto.spec.DESedeKeySpec",
      "DESedeKeySpec",
      "DES_EDE_KEY_LEN"
    ]
  },
  {
    "algorithm": "CMAC",
    "strength": "128",
    "keywords": [
      "#include <openssl/cmac.h>",
      ".getInstance(\"AESCMAC\");",
      "from Crypto.Hash import CMAC"
    ]
  },
  {
    "algorithm": "diffiehellman",
    "strength": "128",
    "keywords": [
      "getDhObjectFromEvent",
      "RSA_DH.cpp",
      "dh_cmp_parameters",
      "dh_pkey_",
      "DH_get_ex_data",
      "DH_meth_",
      "DH_check_params_ex",
      "dh_gen_named_group",
      "dh_param_init",
      "DH_set_ex_data",
      "ossl_dh_",
      "DH_test_flags",
      "DH_set0_",
      "DH_security_bits",
      "DH_set_default_method",
      "DH_get0_",
      "dh_public_print"
    ]
  },
  {
    "algorithm": "dhe",
    "strength": "128",
    "keywords": [
      "ECDHE-RSA-AES",
      "DHE-RSA-AES",
      "DHE-RSA-CAMELLIA256-SHA",
      "DHE-RSA-CAMELLIA128-SHA"
    ]
  },
  {
    "algorithm": "dhies",
    "strength": "128",
    "keywords": [
      "DHIES"
    ]
  },
  {
    "algorithm": "ecdh",
    "strength": "128",
    "keywords": [
      "ecdh_generate_keys",
      "ecdh_shared_secret",
      "ECC_PRV_KEY_SIZE"
    ]
  },
  {
    "algorithm": "ecmqv",
    "strength": "128",
    "keywords": [
      "ECMQV",
      "IEEEP1363",
      "#include <openssl/ecdh.h>",
      "EC_KEY_generate_key",
      ".getInstance(\"EC\"",
      "import org.bouncycastle.jce.ECNamedCurveTable",
      "require('elliptic').ec",
      "crypto/elliptic",
      "crypto/ecdsa",
      "secp256r1"
    ]
  },
  {
    "algorithm": "elgamal",
    "strength": "128",
    "keywords": [
      "egKey",
      "elgamal.py",
      "elgamal.h",
      "ElGamalEncryptor",
      "ElGamalDecryptor",
      "CRYPTOPP_ELGAMAL_H"
    ]
  },
  {
    "algorithm": "f8",
    "strength": "128",
    "keywords": [
      "SrtpCipherF8",
      "F8Context",
      "processPacketAesF8"
    ]
  },
  {
    "algorithm": "fasthash",
    "strength": "256",
    "keywords": [
      "AQUAHASH_H"
    ]
  },
  {
    "algorithm": "fcrypt",
    "strength": "128",
    "keywords": [
      "fcrypt.encrypt",
      "fcrypt.decrypt",
      "fcrypt_ctx",
      "fcrypt_mod_init",
      "F_ENCRYPT"
    ]
  },
  {
    "algorithm": "fnv1",
    "strength": "1024",
    "keywords": [
      "Fnv1a1024",
      "Fnv1a256",
      "Fnv1a512",
      "Fnv1aBigBase"
    ]
  },
  {
    "algorithm": "feal",
    "strength": "64",
    "keywords": [
      "FEAL_key_schedule",
      "FEAL_Encrypt",
      "FEAL_Decrypt",
      "feal8.h"
    ]
  },
  {
    "algorithm": "fletcher",
    "strength": "64",
    "keywords": [
      "fletcher64",
      "fletcher32",
      "fletcher16"
    ]
  },
  {
    "algorithm": "fortuna",
    "strength": "64",
    "keywords": [
      "fortuna"
    ]
  },
  {
    "algorithm": "feal",
    "strength": "64",
    "keywords": [
      "FEAL_key_schedule",
      "FEAL_Encrypt",
      "FEAL_Decrypt",
      "feal8.h"
    ]
  },
  {
    "algorithm": "gea0-x",
    "strength": "64-128",
    "keywords": [
      "LL_GEA",
      "hf_nas_eps_emm_gea"
    ]
  },
  {
    "algorithm": "gost",
    "strength": "64",
    "keywords": [
      "gost_28147_89",
      "gost.hpp",
      "GOST28147_COMPRESSED_SBOX",
      "GOST28147EncryptCycle",
      "GOST28147EncryptBlock",
      "GOST28147SBoxTransformation"
    ]
  },
  {
    "algorithm": "grain",
    "strength": "128",
    "keywords": [
      "grain128aead.h",
      "Grain-128AEAD",
      "grain_data",
      "grain_state",
      "Grain128Engine",
      "grain.h"
    ]
  },
  {
    "algorithm": "haval",
    "strength": "128",
    "keywords": [
      "haval.h",
      "haval_context",
      "Haval-160",
      "Haval-192",
      "Haval-224",
      "Haval-256",
      "Haval-128"
    ]
  },
  {
    "algorithm": "hc128",
    "strength": "128",
    "keywords": [
      "CRYPTOPP_HC128_H",
      "HC-128",
      "HC128Info",
      "Hc128Rng"
    ]
  },
  {
    "algorithm": "hc256",
    "strength": "256",
    "keywords": [
      "hc256_generate",
      "hc256_setkey",
      "hc256_crypt",
      "CRYPTOPP_HC256_H"
    ]
  },
  {
    "algorithm": "ice",
    "strength": "128",
    "keywords": [
      "node-ice",
      "iceKey",
      "__RUBY_ICE_KEY_H",
      "ice_cipher_",
      "IceSubkey"
    ]
  },
  {
    "algorithm": "isaac",
    "strength": "256",
    "keywords": [
      "isaacCSPRNG",
      "isaacRandomPool.h"
    ]
  },
  {
    "algorithm": "idea",
    "strength": "64",
    "keywords": [
      "IdeaMode_h",
      "IdeaEncryptStreamStatus",
      "IdeaStreamEncrypt",
      "IdeaStreamDecrypt",
      "IdeaStreamCTRRandomAccessInit",
      "IdeaStreamPCB",
      "IdeaStreamCFB"
    ]
  },
  {
    "algorithm": "juniper",
    "strength": "",
    "keywords": [
      "mod_Juniper_Decrypt",
      "juniper_decrypt"
    ]
  },
  {
    "algorithm": "khazad",
    "strength": "16",
    "keywords": [
      "KHAZAD_ROUNDS",
      "khazad_setkey",
      "khazad_crypt",
      "khazad_encrypt",
      "khazad_decrypt",
      "khazad_mod_fini",
      "khazad-min.h",
      "KHAZAD_H",
      "KHAZAD_BLOCK_SIZE",
      "KHAZAD_NUM_ROUNDS",
      "KHAZAD_KEY_"
    ]
  },
  {
    "algorithm": "kazumi",
    "strength": "64",
    "keywords": [
      "__KASUMI_H__",
      "kasumi.h",
      "kasumi_desc"
    ]
  },
  {
    "algorithm": "keccak",
    "strength": "256",
    "keywords": [
      "KeccakHash.h",
      "Keccak_HashFinal",
      "KeccakSum"
    ]
  },
  {
    "algorithm": "feal",
    "strength": "64",
    "keywords": [
      "lmhashConstant",
      "unKnownLMHashes",
      "createLMHash"
    ]
  },
  {
    "algorithm": "loki91",
    "strength": "64",
    "keywords": [
      "loki.h",
      "loki.i",
      "loki_lib_ver",
      "setlokikey",
      "setlokikey"
    ]
  },
  {
    "algorithm": "luc",
    "strength": "64",
    "keywords": [
      "CRYPTOPP_LUC_H",
      "LUCFunction",
      "luc.h"
    ]
  },
  {
    "algorithm": "lucifer",
    "strength": "128",
    "keywords": [
      "lucifer.h"
    ]
  },
  {
    "algorithm": "md160",
    "strength": "64",
    "keywords": [
      "ripemd160.h",
      "ripemd160_Init",
      "ripemd160_process",
      "ripemd160_update"
    ]
  },
  {
    "algorithm": "md2",
    "strength": "256",
    "keywords": [
      "MD2.py",
      "md2_block",
      "MD2_Init",
      "MD2_Update",
      "MD2_Final"
    ]
  },
  {
    "algorithm": "md4",
    "strength": "128",
    "keywords": [
      "MD4.h",
      "MD4_HMAC_BLOCK_SIZE",
      "MD4_BLOCK_WORDS",
      "MD4_HASH_WORDS",
      "MD4_DIGEST_SIZE",
      "md4_update",
      "md4_init",
      "md4_final",
      "MD4_Init",
      "md4_block_data_order",
      "#include <openssl/md4.h>",
      "MD4_DIGEST_LENGTH",
      ".createHash('md4')",
      "crypto/md4",
      "hashlib.new('md4'"
    ]
  },
  {
    "algorithm": "md5",
    "strength": "128",
    "keywords": [
      "md5_file",
      "md5",
      "md5crypt",
      "aprcrypt",
      "md5_encrypt",
      "md5_block_data_order",
      "ossl_md5_sha1_",
      "MD5_Init"
    ]
  },
  {
    "algorithm": "md6",
    "strength": "512",
    "keywords": [
      "MD6.py",
      "md6_encrypt",
      "CatMD6Crypto",
      "md6Crypto.hash"
    ]
  },
  {
    "algorithm": "mdc2",
    "strength": "128",
    "keywords": [
      "MDC2.h",
      "mdc2",
      "mdc2_with_aes.py",
      "MDC2_Init",
      "MDC2_Update",
      "MDC2_Final",
      "mdc2_body"
    ]
  },
  {
    "algorithm": "misty1",
    "strength": "32",
    "keywords": [
      "misty1_keyinit",
      "misty1_encrypt_block",
      "MISTY1_KEYSIZE"
    ]
  },
  {
    "algorithm": "mqv",
    "strength": "512",
    "keywords": [
      "mqv.h",
      "hmqv.h",
      "ECMQV",
      "EQV_Domain",
      "ECHMQV512",
      "ECHMQV384",
      "ECHMQV256",
      "ECHMQV128",
      "FHMQV",
      "FHMQV512",
      "FHMQV384",
      "FHMQV256",
      "FHMQV128"
    ]
  },
  {
    "algorithm": "mscash",
    "strength": "256",
    "keywords": [
      "mscash.x.gz",
      "mscash"
    ]
  },
  {
    "algorithm": "mscash2",
    "strength": "128",
    "keywords": [
      "mascash2"
    ]
  },
  {
    "algorithm": "multi2",
    "strength": "128",
    "keywords": [
      "multi2.h",
      "LTC_MULTI2",
      "multi2_desc",
      "multi2_setup",
      "multi2_ecb_encrypt",
      "multi2_ecb_decrypt"
    ]
  },
  {
    "algorithm": "mceliece",
    "strength": "64",
    "keywords": [
      "MCELIECE_H",
      "mceliece.h",
      "mceliece_init",
      "delete_mceliece",
      "mceliececipher.py"
    ]
  },
  {
    "algorithm": "ntruencrypt",
    "strength": "128",
    "keywords": [
      "NTRU_NTRU_H",
      "ntru.h",
      "ntruprime_gen_key_pair",
      "ntru_gen_key_pair_multi",
      "ntru_gen_pub",
      "ntru_encrypt",
      "ntru_decrypt",
      "net.sf.ntru.util"
    ]
  },
  {
    "algorithm": "nimbus",
    "strength": "256",
    "keywords": [
      "nimbusds.jose",
      "JOSEObjectType "
    ]
  },
  {
    "algorithm": "noekeon",
    "strength": "128",
    "keywords": [
      "NoekeonIndirectRef",
      "noekeon.h",
      "NoekeonEngine",
      "NoekeonEngine.cs"
    ]
  },
  {
    "algorithm": "pbe",
    "strength": "128",
    "keywords": [
      "org.xeustechnologies.crypto.kpbe",
      "PBE",
      "KPBE"
    ]
  },
  {
    "algorithm": "pbes1",
    "strength": "128",
    "keywords": [
      "PBEWithMD5AndDES",
      "getPBES1EncryptionObject",
      "getPBES1Hash",
      "getPBES1KDF",
      "PKCS5_SCHEME_PBES1"
    ]
  },
  {
    "algorithm": "pbes2",
    "strength": "256",
    "keywords": [
      "getPBES2EncryptionObject",
      "id-PBES2",
      "PBES2HS256A128KW",
      "PBES2AESKW",
      "PBES2-HS256+A128K"
    ]
  },
  {
    "algorithm": "panama",
    "strength": "128",
    "keywords": [
      "panama.h",
      "panama_LTX__"
    ]
  },
  {
    "algorithm": "quad",
    "strength": "128",
    "keywords": [
      "QUAD.pack",
      "QUAD.unpack"
    ]
  },
  {
    "algorithm": "rc2",
    "strength": "128",
    "keywords": [
      "rc2_LTX__mcrypt_",
      "RC2_encrypt",
      "RC2_decrypt",
      "RC2_ecb_encrypt",
      "RC2_set_key",
      "RC2_cfb64_encrypt",
      "RC2_ofb64_encrypt",
      "RC2_cbc_encrypt",
      "#include <openssl/rc2.h>"
    ]
  },
  {
    "algorithm": "rc4",
    "strength": "2048",
    "keywords": [
      "RC4_H",
      "RC4_KEY_S",
      "RC4_key",
      "RC4",
      "RC4_set_key"
    ]
  },
  {
    "algorithm": "rc4-hmac",
    "strength": "2048",
    "keywords": [
      "RC4-HMAC-MD5",
      "RC4HMAC",
      "RC4-HMAC.go"
    ]
  },
  {
    "algorithm": "rc5",
    "strength": "128",
    "keywords": [
      "RC5.new",
      "rc5.rb",
      "RC5Enc",
      "RC5Dec",
      "RC5Enc.java",
      "RC5Dec.java",
      "RC5_32_decrypt",
      "RC5_32_set_key",
      "RC5_32_cfb64_encrypt",
      "RC5_32_ofb64_encrypt",
      "RC5_32_ecb_encrypt",
      "RC5_32_cbc_encrypt",
      "RC5_32_encrypt",
      "import org.bouncycastle.crypto.engines.RC532Engine",
      "require('rc5-cipher')",
      "rc5.encrypt(",
      "github.com/inge6/gorc5",
      "gorc5.NewCipher",
      "require 'RC5.php'",
      "RC5::encrypt",
      "from rc5 import RC5"
    ]
  },
  {
    "algorithm": "rc6",
    "strength": "128",
    "keywords": [
      "AlgorithmRC6",
      "RC6.encrypt",
      "RC6.decript",
      "RC6_HPP__"
    ]
  },
  {
    "algorithm": "ripemd",
    "strength": "128",
    "keywords": [
      "RIPEMD160_DIGEST_LENGTH",
      "RIPEMD160_CTX",
      "ripemd160_Init",
      "ripemd160_process",
      "ripemd160_Update",
      "RIPEMD160_Init",
      "ripemd160_block_data_order",
      "ripemd160_block_x86",
      "ripemd160_block",
      "#include <openssl/ripemd.h>",
      "RIPEMD160_Init",
      "RIPEMD160_Update",
      "RIPEMD160_Final",
      ".getInstance(\"RIPEMD160\")",
      "crypto.createHash('ripemd160')",
      "golang.org/x/crypto/ripemd160",
      "ripemd160.New()",
      "hash('ripemd160'",
      "hashlib.new('ripemd160'"
    ]
  },
  {
    "algorithm": "rsa-oaep",
    "strength": "128",
    "keywords": [
      "encryptRSAWithOAEP",
      "decryptRSAWithOAEP",
      "RSA_OAEP_H",
      "RSA_OAEP"
    ]
  },
  {
    "algorithm": "rsa",
    "strength": "128",
    "keywords": [
      "forge.pki.rsa.",
      "require('node-rsa')",
      "RSACRYPT_H",
      "RSAcrypt",
      "RSAdecrypt",
      "JSEncryptRSAKey",
      "ossl_rsa_acvp_",
      "RSA_size",
      "rsa_priv_print",
      "RSA_verify_PKCS1_PSS",
      "RSA_get0_crt_params",
      "RSA_meth_set_",
      "RSA_meth_free",
      "RSA_padding_check_none",
      "pkey_rsa_ctrl_str",
      "ossl_rsa_check_",
      "ossl_rsa_pss_get_param_unverified",
      "rsa_pkey_dirty_cnt",
      "rsa_int_import_from",
      "rsa_pkey_import_from",
      "ossl_rsa_dup",
      "rsa_new_intern",
      "RSA_set_method",
      "RSA_sign_ASN1_OCTET_STRIN",
      "rsa_validate_rng_strength",
      "rsa_validate_keypair_multiprime",
      "RSA_meth_new",
      "RSA_verify_ASN1_OCTET_STRING",
      "RSA_X931_generate_key_ex",
      "RSA_generate_multi_prime_key",
      "RSA_get_ex_data",
      "RSA_padding_add_PKCS1_type_2",
      "rsa_pub_encode",
      "rsa_item_sign",
      "EVP_PKEY_CTX_set_rsa_keygen_primes",
      "RSA_padding_add_PKCS1_OAEP",
      "RSA/ECB/",
      "RSAES-PKCS1-V1_5-ENCRYPT",
      "RSAES-PKCS1-V1_5"
    ]
  },
  {
    "algorithm": "rabin",
    "strength": "128",
    "keywords": [
      "Rabin.genKey",
      "Rabin.encrypt",
      "Rabin.decrypt"
    ]
  },
  {
    "algorithm": "rabbit",
    "strength": "128",
    "keywords": [
      "Rabbit_Util",
      "Rabbit_ctx",
      "Rabbit_state",
      "Rabbit_Cipher.py",
      "#include \"rabbit.h\"",
      "rabbit_encrypt",
      "SecretKeySpec(key, \"Rabbit\")",
      "createCipheriv('Rabbit'",
      "from Crypto.Cipher import Rabbit"
    ]
  },
  {
    "algorithm": "rijndael",
    "strength": "256",
    "keywords": [
      "Rijndael.h",
      "Rijndael256"
    ]
  },
  {
    "algorithm": "salsa10",
    "strength": "64",
    "keywords": [
      "salsa10",
      "salsa10-src.bin",
      "salsa10-nonce.bin"
    ]
  },
  {
    "algorithm": "salsa20",
    "strength": "128",
    "keywords": [
      "ESTREAM_SALSA20",
      "wrap_salsa20_set_nonce",
      "c_salsa20_crypt",
      "#include \"salsa20.h\"",
      ".createCipheriv('salsa20'",
      "from Crypto.Cipher import Salsa20",
      "Salsa20.new"
    ]
  },
  {
    "algorithm": "shs",
    "strength": "128",
    "keywords": [
      "secret-handshake",
      "shsInit",
      "shs1",
      "shsInit",
      "SHS_CTX",
      "shsUpdate",
      "shs.h"
    ]
  },
  {
    "algorithm": "sms4",
    "strength": "128",
    "keywords": [
      "sm4_encdec",
      "CRYPTOPP_SM4_H",
      "CRYPTOPP_SM4_ADVANCED_PROCESS_BLOCKS",
      "sms4.h",
      "SMS4CROL",
      "SMS4MASK"
    ]
  },
  {
    "algorithm": "snow",
    "strength": "128",
    "keywords": [
      "snow5_aes_round",
      "snow-3g.h",
      "RTE_CRYPTO_CIPHER_SNOW3G_UEA2",
      "RTE_CRYPTO_AUTH_SNOW3G_UIA2"
    ]
  },
  {
    "algorithm": "snerfu",
    "strength": "256",
    "keywords": [
      "Snefru"
    ]
  },
  {
    "algorithm": "sosemanuk",
    "strength": "128",
    "keywords": [
      "SOSEMANUK_H__",
      "sosemanuk_key_context",
      "sosemanuk_schedule",
      "sosemanuk_init",
      "sosemanuk_encrypt",
      "SosemanukSlow",
      "SosemanukFast"
    ]
  },
  {
    "algorithm": "ssha",
    "strength": "128",
    "keywords": [
      "checkssha",
      "SSHA",
      "SSHA224PasswordEncoder",
      "SSHA224PasswordDecoder",
      "SSHA256PasswordEncoder",
      "SSHA256PasswordDecoder"
    ]
  },
  {
    "algorithm": "seal",
    "strength": "128",
    "keywords": [
      "SEALContext",
      "seal.h",
      "SEALWrapper",
      "toSealObject",
      "fromSealObject"
    ]
  },
  {
    "algorithm": "seed",
    "strength": "256",
    "keywords": [
      "seed128Cipher",
      "seed.go"
    ]
  },
  {
    "algorithm": "shax",
    "strength": "128-512",
    "keywords": [
      "SHA-1",
      "SHA-224",
      "SHA-256",
      "SHA-384",
      "SHA-512",
      "SHA3-224",
      "SHA3-256",
      "SHA3-384",
      "SHA3-512",
      "jsSHA1",
      "jsSHA256",
      "jsSHA512",
      "jsSHA3",
      "sha3.sha3_256",
      "sha.ts",
      "SHA512_Update",
      "SHA512_Init",
      "sha512_block_data_order",
      "SHA512_Transform",
      "sha512_block_p8",
      "SHA512_Final",
      "SHA256_Init",
      "SHA224_Update",
      "SHA224_Final",
      "sha512_256_init",
      "sha512_block_ppc",
      "import org.bouncycastle.crypto.digests.SHA256Digest",
      "import org.bouncycastle.crypto.digests.SHA512Digest",
      "forge.md.sha256.",
      "createHash('sha256')",
      "CryptoJS.SHA256",
      "DigestUtils.sha256Hex",
      ".getInstance(\"SHA-256\")",
      "'sha512'",
      "openssl/sha.h",
      "cryptopp/sha.h",
      "crypto/sha1",
      "crypto/sha256",
      "crypto/sha512",
      "hash('sha256'",
      "sha256("
    ]
  },
  {
    "algorithm": "shacal",
    "strength": "128",
    "keywords": [
      "Shacal",
      "isShacal1",
      "CRYPTOPP_SHACAL2_H",
      "SHACAL2Encryption",
      "SHACAL2",
      "#include \"shacal.h\"",
      ".getInstance(\"Shacal2\");",
      "require('shacal')",
      "crypto/shacal2",
      "from Crypto.Cipher import SHACAL2",
      "SHACAL2.new"
    ]
  },
  {
    "algorithm": "shark",
    "strength": "64",
    "keywords": [
      "voipshark",
      "shark.h",
      "SHARKTransform",
      "CRYPTOPP_SHARK_H"
    ]
  },
  {
    "algorithm": "skein",
    "strength": "256",
    "keywords": [
      "skeincrypto.h",
      "skein",
      "sk_init",
      "sk_encrypt",
      "sk_decrypt"
    ]
  },
  {
    "algorithm": "skipjack",
    "strength": "32",
    "keywords": [
      "FastSkipJack",
      "SkipJack",
      "skipjackCipher",
      "skipjack.go"
    ]
  },
  {
    "algorithm": "sober",
    "strength": "128",
    "keywords": [
      "LTC_SOBER128",
      "sober128_start",
      "sober128_add_entropy",
      "sober128_ready",
      "sober128_read",
      "sober128_done",
      "sober128_export",
      "sober128_import",
      "sober128_test"
    ]
  },
  {
    "algorithm": "tdes",
    "strength": "128",
    "keywords": [
      "TDES_FLAGS_ENCRYPT",
      "TDES_FLAGS_OPMODE_MASK",
      "TDES_FLAGS_ECB",
      "TDES_FLAGS_CBC",
      "TDES_FLAGS_OFB",
      "TDES_FLAGS_CFB64",
      "TDES_FLAGS_CFB32",
      "TDES_FLAGS_CFB16",
      "TDES_FLAGS_CFB8",
      "DES_ecb3_encrypt"
    ]
  },
  {
    "algorithm": "tea",
    "strength": "128",
    "keywords": [
      "tea_encrypt",
      "tea_decrypt",
      "tea_cbc_mode",
      "tea_ofb_mode"
    ]
  },
  {
    "algorithm": "tnepres",
    "strength": "256",
    "keywords": [
      "TnepresEngine",
      "Cipher.Tnepres",
      "KeyGenerator.Tnepres",
      "AlgorithmParameters.Tnepres"
    ]
  },
  {
    "algorithm": "threefish",
    "strength": "1024",
    "keywords": [
      "Crypto.Threefish.Common",
      "newThreefish256",
      "newThreefish512",
      "newThreefish1024",
      "threefish_mod_fini",
      "threefish_algs",
      "threefish_round",
      "threefish_roundinv",
      "threefish_encrypt_generic"
    ]
  },
  {
    "algorithm": "tiger",
    "strength": "256",
    "keywords": [
      "tiger_compress_macro",
      "tiger_compress",
      "ausTigerTokens1"
    ]
  },
  {
    "algorithm": "twofish",
    "strength": "64",
    "keywords": [
      "twofish.h",
      "Twofish_fatal",
      "Twofish_Byte",
      "exp_Twofish_prepare_key",
      "Twofish_prepare_key",
      "twofish.h"
    ]
  },
  {
    "algorithm": "vmpc",
    "strength": "",
    "keywords": [
      "VMPCEngine.java ",
      "VMPCrypt.py",
      "_VMPC_H_",
      "VmpcInitKeyRound",
      "VmpcInitKey",
      "VmpcInitKeyBASIC",
      "VmpcEncrypt",
      "VmpcEncryptMAC",
      "VmpcDecryptMAC",
      "VmpcOutputMAC"
    ]
  },
  {
    "algorithm": "wake",
    "strength": "64",
    "keywords": [
      "WAKE.h",
      "WAKE_TestInstantiations",
      "WAKE_Base",
      "WAKE_Policy",
      "WAKE_Output"
    ]
  },
  {
    "algorithm": "whirpool",
    "strength": "128",
    "keywords": [
      "whirlpool.New",
      "whirpool.go",
      "rhash_whirlpool_init",
      "rhash_whirlpool_sbox",
      "rhash_whirlpool_process_block",
      "WHIRLPOOL_OP",
      "WHIRLPOOL_Update",
      "WHIRLPOOL_BitUpdate",
      "WHIRLPOOL_Final",
      "whirlpool_block_mmx",
      "whirlpool_block",
      "WHIRLPOOL_Init",
      "#include <whirlpool.h>",
      "#include \"whirlpool.h\"",
      "import org.bouncycastle.crypto.digests.WhirlpoolDigest",
      "crypto.createHash('whirlpool')",
      "github.com/jzelinskie/whirlpool",
      "hashlib.new('whirlpool')"
    ]
  },
  {
    "algorithm": "xtr",
    "strength": "64",
    "keywords": [
      "CRYPTOPP_XTR_H",
      "XTR_FindPrimesAndGenerator",
      "XTR_Exponentiate"
    ]
  },
  {
    "algorithm": "yarrow",
    "strength": "160",
    "keywords": [
      "yarrow_start",
      "yarrow_desc",
      "yarrow_start",
      "yarrow_add_entropy",
      "yarrow_ready",
      "yarrow_read",
      "yarrow_done",
      "yarrow_export",
      "yarrow_import",
      "yarrow_test",
      "LTC_YARROW",
      "LTC_YARROW_AES",
      "#include <yarrow.h>",
      "yarrow256_done",
      "yarrow256_context"
    ]
  },
  {
    "algorithm": "zuc",
    "strength": "128",
    "keywords": [
      "ZUC_H",
      "__ZUC_H__",
      "zuc.asm",
      "_zuc_init",
      "_zuc_generate_keystream"
    ]
  },
  {
    "algorithm": "zipcrypt",
    "strength": "64",
    "keywords": [
      "zipcloak",
      "zipbare"
    ]
  },
  {
    "algorithm": "dsa",
    "strength": "128",
    "keywords": [
      "ossl_dsa_generate_ffc_parameters",
      "DSA_set_method",
      "ossl_dsa_sign_int",
      "DSA_set_ex_data",
      "DSA_print",
      "DSA_SIG_new",
      "DSA_do_sign",
      "dsa_finish",
      "ossl_dsa_key_from_pkcs8",
      "DSA_bits",
      "dsa_pkey_ctrl",
      "dsa_keygen_pairwise_test",
      "pkey_dsa_keygen",
      "pkey_dsa_copy",
      "dsa_param_print",
      "dsa_pub_print",
      "DSA_meth_set_",
      "ossl_dsa_key_fromdata",
      "DSA_set_default_method",
      "pkey_dsa_cleanup",
      "pkey_dsa_ctrl_str",
      "ossl_dsa_is_foreign",
      "ossl_dsa_check_pairwise",
      "DSA_meth_set0_app_data",
      "pkey_dsa_init",
      "dsa_sign_setup",
      "ossl_dsa_check_params",
      "DSA_up_ref",
      "DSA_set0_key",
      "DSA_meth_set1_name",
      "dsa_init",
      "dsa_mod_inverse_fermat",
      "ossl_dsa_ffc_params_fromdata",
      "DSA_meth_new",
      "pkey_dsa_verify",
      "DSA_generate_",
      "ossl_dsa_get0_params",
      "dsa_pub_encode",
      "ossl_ffc_params_cmp",
      "DSAparams_dup",
      "DSA_meth_dup",
      "EVP_PKEY_CTX_set_dsa_paramgen_md",
      "dsa_priv_decode",
      "int_dsa_free",
      "ossl_dsa_check_",
      "DSA_clear_flags",
      "DSA_verify",
      "i2d_DSAparams",
      "DSA_test_flags",
      "DSA_meth_get_",
      "dsa_sign_setup_no_digest",
      "dsa_priv_encode",
      "dsa_copy_parameters",
      "#include <openssl/dsa.h>",
      ".getInstance(\"DSA\")",
      ".getInstance(\"SHA256withDSA\")",
      "crypto.generateKeyPairSync('dsa'",
      "dsa.GenerateKey",
      "crypto/dsa",
      "dsa.Sign",
      "OPENSSL_KEYTYPE_DSA",
      "from Crypto.PublicKey import DSA"
    ]
  },
  {
    "algorithm": "pbkdf1",
    "strength": "128",
    "keywords": [
      "pbkdf1.js"
    ]
  },
  {
    "algorithm": "pbkdf2",
    "strength": "128",
    "keywords": [
      "pbkdf2.js",
      "Ikonoshirt_Pbkdf2_Model_Encryption",
      "KeyDerivation.Pbkdf2",
      "_pbkdf2"
    ]
  },
  {
    "algorithm": "pkcs12",
    "strength": "128",
    "keywords": [
      "PKCS7_digest_from_attributes",
      "PKCS7_set_content",
      "ossl_x509_add_cert_new",
      "PKCS7_add_",
      "PKCS7_type_is_other",
      "PKCS7_find_digest",
      "pkcs7_ecdsa_or_dsa_sign_verify_setup",
      "pkcs7_rsa_sign_verify_setup",
      "PKCS7_RECIP_INFO_set",
      "i2d_PKCS7_bio_stream",
      "PKCS7_final",
      "ASN1_INTEGER_cmp",
      "PKCS7_dataDecode",
      "PKCS7_encrypt_ex",
      "ossl_err_load_PKCS7_strings",
      "PKCS7_RECIP_INFO_get0_alg",
      "PKCS7_sign_add_signer",
      "PKCS7_verify",
      "pkcs7_cmp_ri",
      "PKCS7_SIGNER_INFO_sign",
      "PKCS7_set_type",
      "PKCS7_encrypt",
      "PKCS7_dataInit",
      "PKCS7_set_attributes",
      "PKCS7_SIGNER_INFO_set",
      "pkcs7_bio_add_digest",
      "ossl_pkcs7_ctx_propagate",
      "PKCS7_stream",
      "PKCS7_decrypt",
      "PKCS7_get_octet_string",
      "PKCS7_get_attribute",
      "PKCS7_content_new",
      "ossl_pkcs7_set0_libctx",
      "ossl_pkcs7_ctx_get0_libctx",
      "PKCS7_SIGNER_INFO_get0_algs",
      "PKCS7_sign",
      "PKCS7_new",
      "pkcs7_decrypt_rinfo",
      "PKCS7_dataFinal",
      "ossl_pkcs7_resolve_libctx",
      "PEM_write_bio_PKCS7_stream",
      "PKCS7_ctrl",
      "SMIME_write_PKCS7",
      "SMIME_write_ASN1_ex",
      "PKCS7_add1_attrib_digest",
      "PKCS7_get_issuer_and_serial",
      "PKCS7_get_signed_attribute",
      "PKCS7_sign_ex",
      "PKCS12_get0_mac",
      "PKCS12_pack_p7encdata",
      "PKCS12_add_",
      "PKCS12_PBE_",
      "PKCS12_item_i2d_encrypt",
      "PKCS12_init",
      "PKCS12_gen_mac",
      "PKCS12_decrypt_skey",
      "PKCS12_add1_attr_by_NID",
      "PKCS12_key_gen_utf8_ex",
      "PKCS12_get_attr",
      "PKCS8_get_attr",
      "PKCS12_SAFEBAG_create0_pkcs8",
      "PKCS12_init_ex",
      "parse_pk12",
      "PKCS12_pack_",
      "PKCS12_item_i2d_encrypt_ex",
      "PKCS12_verify_mac",
      "PKCS12_SAFEBAG_get_nid",
      "OPENSSL_asc2uni",
      "PKCS12_SAFEBAG_create_pkcs8_encrypt",
      "PKCS8_decrypt_ex",
      "PKCS12_key_gen_asc_ex",
      "pkcs12_gen_mac",
      "PKCS8_decrypt",
      "PKCS12_decrypt_skey_ex"
    ]
  },
  {
    "algorithm": "pkcs7",
    "strength": "128",
    "keywords": [
      "PKCS7_digest_from_attributes",
      "PKCS7_set_content",
      "ossl_x509_add_cert_new",
      "PKCS7_add_attrib_smimecap",
      "PKCS7_type_is_other",
      "PKCS7_find_digest",
      "pkcs7_ecdsa_or_dsa_sign_verify_setup",
      "pkcs7_rsa_sign_verify_setup",
      "PKCS7_RECIP_INFO_set",
      "i2d_PKCS7_bio_stream",
      "PKCS7_final",
      "ASN1_INTEGER_cmp",
      "PKCS7_dataDecode",
      "PKCS7_encrypt_ex",
      "ossl_err_load_PKCS7_strings",
      "PKCS7_RECIP_INFO_get0_alg",
      "PKCS7_sign_add_signer",
      "PKCS7_verify",
      "pkcs7_cmp_ri",
      "PKCS7_SIGNER_INFO_sign",
      "PKCS7_set_type",
      "PKCS7_add_recipient",
      "PKCS7_encrypt",
      "PKCS7_dataInit",
      "PKCS7_set_attributes",
      "PKCS7_SIGNER_INFO_set",
      "pkcs7_bio_add_digest",
      "PKCS7_add_signed_attribute",
      "PKCS7_add_crl",
      "PKCS7_add_signer",
      "PKCS7_add_signature",
      "ossl_pkcs7_ctx_propagate",
      "PKCS7_stream",
      "PKCS7_decrypt",
      "PKCS7_get_octet_string",
      "PKCS7_get_attribute",
      "PKCS7_content_new",
      "ossl_pkcs7_set0_libctx",
      "ossl_pkcs7_ctx_get0_libctx",
      "PKCS7_SIGNER_INFO_get0_algs",
      "PKCS7_sign",
      "PKCS7_new",
      "pkcs7_decrypt_rinfo",
      "PKCS7_dataFinal",
      "ossl_pkcs7_resolve_libctx",
      "PEM_write_bio_PKCS7_stream",
      "PKCS7_ctrl",
      "PKCS7_add_certificate",
      "SMIME_write_PKCS7",
      "SMIME_write_ASN1_ex",
      "PKCS7_add1_attrib_digest",
      "PKCS7_get_issuer_and_serial",
      "PKCS7_get_signed_attribute",
      "PKCS7_sign_ex"
    ]
  },
  {
    "algorithm": "sapphire",
    "strength": "256",
    "keywords": [
      "sapphire.h",
      "sapphire::keyrand",
      "sapphire::initialize",
      "sapphire::init_hash"
    ]
  },
  {
    "algorithm": "serpent",
    "strength": "128",
    "keywords": [
      "serpent_subkey_t",
      "serpent_blk"
    ]
  },
  {
    "algorithm": "srp",
    "strength": "128",
    "keywords": [
      "SRP_VBASE_get1_by_user",
      "SRP_create_verifier_BN_ex",
      "SRP_Calc_client_key",
      "SRP_get_gN_by_id",
      "SRP_VBASE_get_by_user",
      "SRP_create_verifier_BN",
      "SRP_Calc_x_ex",
      "SRP_Verify_B_mod_N",
      "SRP_user_pwd_set_gN",
      "SRP_user_pwd_set1_ids",
      "SRP_VBASE_add0_user",
      "SRP_Calc_server_key",
      "SRP_Calc_B_ex",
      "SRP_get_default_gN",
      "SRP_VBASE_new",
      "SRP_user_pwd_set_sv",
      "SRP_VBASE_free",
      "SRP_gN_free",
      "SRP_create_verifier_ex",
      "SRP_gN_new_init",
      "SRP_gN_place_bn",
      "SRP_VBASE_init",
      "SRP_Calc_u_ex",
      "SRP_Calc_x",
      "SRP_check_known_gN_param",
      "srp_user_pwd_dup",
      "SRP_Calc_B",
      "SRP_Verify_A_mod_N",
      "SRP_user_pwd_new",
      "SRP_user_pwd_set0_sv",
      "SRP_create_verifier",
      "SRP_Calc_A",
      "SRP_Calc_client_key_ex",
      "SRP_user_pwd_free",
      "SRPClient",
      "SRPServer",
      "libsrp",
      "srp",
      "_pysrp",
      "_ctsrp"
    ]
  },
  {
    "algorithm": "tcrypt",
    "strength": "128",
    "keywords": [
      "tcrypt.h",
      "tcrypt_encrypt",
      "tcrypt_decrypt",
      "tcrypt_init",
      "_CRYPTO_TCRYPT_H"
    ]
  },
  {
    "algorithm": "xtea",
    "strength": "128",
    "keywords": [
      "xtea_setkey",
      "xtea.h",
      "xtea_encodeecb",
      "xtea_decodecbc",
      "xtea_declen"
    ]
  },
  {
    "algorithm": "X509",
    "strength": "128",
    "keywords": [
      "#include <openssl/x509.h>",
      "PEM_read_X509",
      "import java.security.cert.X509Certificate",
      ".getInstance(\"X.509\")",
      "crypto/x509",
      "x509.ParseCertificate",
      "openssl_x509_free",
      "from cryptography import x509",
      "x509.load_pem_x509_certificate"
    ]
  }
]