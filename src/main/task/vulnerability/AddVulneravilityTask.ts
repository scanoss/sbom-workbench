import log from "electron-log";
import AppConfig from '../../../config/AppConfigModule';
import { ITask } from '../Task';
import { modelProvider } from '../../services/ModelProvider';
import { Vulnerability } from '../../model/entity/Vulnerability';
import * as VulnerabilityMessages from "../grpc/scanoss/api/vulnerabilities/v2/scanoss-vulnerabilities_pb"
import { StatusCode } from "../grpc/scanoss/api/common/v2/scanoss-common_pb";
// eslint-disable-next-line import/extensions
import { gRPCConnections } from "../grpc/gRPCConnection/gRPCConnection"
import { GetVulnerabilityRequestBuilder } from "./builders/GetVulnerabilityRequestBuilder";
import { VulnerabilitiesClient } from "../grpc/scanoss/api/vulnerabilities/v2/scanoss-vulnerabilities_grpc_pb";
import {userSettingService} from "../../services/UserSettingService";
import {workspace} from "../../workspace/Workspace";

export class AddVulneravilityTask implements ITask<Array<string>, void> {
  public async run(components: Array<string>): Promise<void> {
    try {
     const { DEFAULT_API_INDEX, APIS } = userSettingService.get();
      if(APIS[DEFAULT_API_INDEX].API_KEY==='' && workspace.getOpenProject().getApiKey()===undefined) return;
      if (!AppConfig.FF_ENABLE_SCAN_VULNERABILITY) return;
      const client = gRPCConnections.getVulnerabilityStub() as VulnerabilitiesClient;
      const data = {
        purls: components.map((item) => {
          return {purl: item}
        })
      };
      const req = GetVulnerabilityRequestBuilder.build(data);

      const pGetVulnerabilities = new Promise((resolve, reject) => {
        client.getVulnerabilities(req, (err, resp) => {
          if (err) reject(err);
          else resolve(resp);
        });
      });

      const response = (await pGetVulnerabilities) as VulnerabilityMessages.VulnerabilityResponse;
      if (response.getStatus().getStatus() !== StatusCode.SUCCESS) throw new Error(response.getStatus().getMessage());

      const respJSON = response.toObject();
      const vulnerabilities = this.groupVulnerabilitiesByCVE(respJSON);
      await modelProvider.model.vulnerability.insertAll(vulnerabilities);
      await modelProvider.model.vulnerability.insertComponentVulnerabilityFromGRPC(respJSON.purlsList);
    }catch(err: any){
      log.error(err);
    }
  }

  private groupVulnerabilitiesByCVE(vulnerabilities: any): Array<Vulnerability> {
    const vul: Record<string, Vulnerability> = {};
    vulnerabilities.purlsList.forEach((p) => {
      p.vulnerabilitiesList.forEach((v) => {
        if (!vul[v.cve]) vul[v.cve] = Object.assign(new Vulnerability(), v);
      });
    });
    return Object.values(vul);
  }

}
