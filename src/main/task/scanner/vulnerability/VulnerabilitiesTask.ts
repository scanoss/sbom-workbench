import log from 'electron-log';
import i18next from 'i18next';
import AppConfig from '../../../../config/AppConfigModule';
import { ScannerStage } from '../../../../api/types';
import { Project } from '../../../workspace/Project';
import { modelProvider } from '../../../services/ModelProvider';
import { AddVulnerabilityTask } from '../../vulnerability/AddVulnerabilityTask';
import { Scanner } from '../types';
import { componentHelper } from '../../../helpers/ComponentHelper';
import { userSettingService } from '../../../services/UserSettingService';

export class VulnerabilitiesTask implements Scanner.IPipelineTask {
  private project: Project;

  constructor(project: Project) {
    this.project = project;
  }

  public getStageProperties(): Scanner.StageProperties {
    return {
      name: ScannerStage.VULNERABILITY,
      label: i18next.t('Title:SearchingVulnerabilities'),
      isCritical: false,
    };
  }

  public async run(): Promise<boolean> {
    if (!AppConfig.FF_ENABLE_SCAN_VULNERABILITY) return false;

    const {GRPC_PROXY} = userSettingService.get();
    process.env.grpc_proxy = GRPC_PROXY ? GRPC_PROXY : '';
    const detectedComponents = await modelProvider.model.component.getAll(null);
    const dependencyComponents = await modelProvider.model.dependency.getAll(
      null,
    );
    const components = componentHelper.groupComponentByPurlVersion(
      detectedComponents,
      dependencyComponents,
    );
    const addVulnerability = new AddVulnerabilityTask();
    await addVulnerability.run({ components });
    this.project.save();
    return true;
  }
}
