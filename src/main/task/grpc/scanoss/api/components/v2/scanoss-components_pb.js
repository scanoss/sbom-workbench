// source: scanoss/api/components/v2/scanoss-components.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var scanoss_api_common_v2_scanoss$common_pb = require('../../../../scanoss/api/common/v2/scanoss-common_pb.js');
goog.object.extend(proto, scanoss_api_common_v2_scanoss$common_pb);
goog.exportSymbol('proto.scanoss.api.components.v2.CompSearchRequest', null, global);
goog.exportSymbol('proto.scanoss.api.components.v2.CompSearchResponse', null, global);
goog.exportSymbol('proto.scanoss.api.components.v2.CompSearchResponse.Component', null, global);
goog.exportSymbol('proto.scanoss.api.components.v2.CompVersionRequest', null, global);
goog.exportSymbol('proto.scanoss.api.components.v2.CompVersionResponse', null, global);
goog.exportSymbol('proto.scanoss.api.components.v2.CompVersionResponse.Component', null, global);
goog.exportSymbol('proto.scanoss.api.components.v2.CompVersionResponse.License', null, global);
goog.exportSymbol('proto.scanoss.api.components.v2.CompVersionResponse.Version', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.components.v2.CompSearchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scanoss.api.components.v2.CompSearchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.components.v2.CompSearchRequest.displayName = 'proto.scanoss.api.components.v2.CompSearchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.components.v2.CompSearchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.components.v2.CompSearchResponse.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.components.v2.CompSearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.components.v2.CompSearchResponse.displayName = 'proto.scanoss.api.components.v2.CompSearchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scanoss.api.components.v2.CompSearchResponse.Component, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.components.v2.CompSearchResponse.Component.displayName = 'proto.scanoss.api.components.v2.CompSearchResponse.Component';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.components.v2.CompVersionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scanoss.api.components.v2.CompVersionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.components.v2.CompVersionRequest.displayName = 'proto.scanoss.api.components.v2.CompVersionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.components.v2.CompVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scanoss.api.components.v2.CompVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.components.v2.CompVersionResponse.displayName = 'proto.scanoss.api.components.v2.CompVersionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.components.v2.CompVersionResponse.License = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.scanoss.api.components.v2.CompVersionResponse.License, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.components.v2.CompVersionResponse.License.displayName = 'proto.scanoss.api.components.v2.CompVersionResponse.License';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.components.v2.CompVersionResponse.Version.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.components.v2.CompVersionResponse.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.components.v2.CompVersionResponse.Version.displayName = 'proto.scanoss.api.components.v2.CompVersionResponse.Version';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.scanoss.api.components.v2.CompVersionResponse.Component.repeatedFields_, null);
};
goog.inherits(proto.scanoss.api.components.v2.CompVersionResponse.Component, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.scanoss.api.components.v2.CompVersionResponse.Component.displayName = 'proto.scanoss.api.components.v2.CompVersionResponse.Component';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.components.v2.CompSearchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.components.v2.CompSearchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompSearchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    search: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vendor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    component: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pb_package: jspb.Message.getFieldWithDefault(msg, 4, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.components.v2.CompSearchRequest}
 */
proto.scanoss.api.components.v2.CompSearchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.components.v2.CompSearchRequest;
  return proto.scanoss.api.components.v2.CompSearchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.components.v2.CompSearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.components.v2.CompSearchRequest}
 */
proto.scanoss.api.components.v2.CompSearchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPackage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.components.v2.CompSearchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.components.v2.CompSearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompSearchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComponent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPackage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string search = 1;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompSearchRequest} returns this
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.setSearch = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vendor = 2;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompSearchRequest} returns this
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string component = 3;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.getComponent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompSearchRequest} returns this
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.setComponent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string package = 4;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.getPackage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompSearchRequest} returns this
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.setPackage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 limit = 6;
 * @return {number}
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.scanoss.api.components.v2.CompSearchRequest} returns this
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 offset = 7;
 * @return {number}
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.scanoss.api.components.v2.CompSearchRequest} returns this
 */
proto.scanoss.api.components.v2.CompSearchRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.components.v2.CompSearchResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.components.v2.CompSearchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.components.v2.CompSearchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.components.v2.CompSearchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompSearchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    componentsList: jspb.Message.toObjectList(msg.getComponentsList(),
    proto.scanoss.api.components.v2.CompSearchResponse.Component.toObject, includeInstance),
    status: (f = msg.getStatus()) && scanoss_api_common_v2_scanoss$common_pb.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse}
 */
proto.scanoss.api.components.v2.CompSearchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.components.v2.CompSearchResponse;
  return proto.scanoss.api.components.v2.CompSearchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.components.v2.CompSearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse}
 */
proto.scanoss.api.components.v2.CompSearchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scanoss.api.components.v2.CompSearchResponse.Component;
      reader.readMessage(value,proto.scanoss.api.components.v2.CompSearchResponse.Component.deserializeBinaryFromReader);
      msg.addComponents(value);
      break;
    case 2:
      var value = new scanoss_api_common_v2_scanoss$common_pb.StatusResponse;
      reader.readMessage(value,scanoss_api_common_v2_scanoss$common_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.components.v2.CompSearchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.components.v2.CompSearchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.components.v2.CompSearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompSearchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.scanoss.api.components.v2.CompSearchResponse.Component.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scanoss_api_common_v2_scanoss$common_pb.StatusResponse.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.components.v2.CompSearchResponse.Component.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.components.v2.CompSearchResponse.Component} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.toObject = function(includeInstance, msg) {
  var f, obj = {
    component: jspb.Message.getFieldWithDefault(msg, 1, ""),
    purl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse.Component}
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.components.v2.CompSearchResponse.Component;
  return proto.scanoss.api.components.v2.CompSearchResponse.Component.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.components.v2.CompSearchResponse.Component} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse.Component}
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.components.v2.CompSearchResponse.Component.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.components.v2.CompSearchResponse.Component} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string component = 1;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.prototype.getComponent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse.Component} returns this
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.prototype.setComponent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string purl = 2;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse.Component} returns this
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse.Component} returns this
 */
proto.scanoss.api.components.v2.CompSearchResponse.Component.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Component components = 1;
 * @return {!Array<!proto.scanoss.api.components.v2.CompSearchResponse.Component>}
 */
proto.scanoss.api.components.v2.CompSearchResponse.prototype.getComponentsList = function() {
  return /** @type{!Array<!proto.scanoss.api.components.v2.CompSearchResponse.Component>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.components.v2.CompSearchResponse.Component, 1));
};


/**
 * @param {!Array<!proto.scanoss.api.components.v2.CompSearchResponse.Component>} value
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse} returns this
*/
proto.scanoss.api.components.v2.CompSearchResponse.prototype.setComponentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.scanoss.api.components.v2.CompSearchResponse.Component=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse.Component}
 */
proto.scanoss.api.components.v2.CompSearchResponse.prototype.addComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.scanoss.api.components.v2.CompSearchResponse.Component, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse} returns this
 */
proto.scanoss.api.components.v2.CompSearchResponse.prototype.clearComponentsList = function() {
  return this.setComponentsList([]);
};


/**
 * optional scanoss.api.common.v2.StatusResponse status = 2;
 * @return {?proto.scanoss.api.common.v2.StatusResponse}
 */
proto.scanoss.api.components.v2.CompSearchResponse.prototype.getStatus = function() {
  return /** @type{?proto.scanoss.api.common.v2.StatusResponse} */ (
    jspb.Message.getWrapperField(this, scanoss_api_common_v2_scanoss$common_pb.StatusResponse, 2));
};


/**
 * @param {?proto.scanoss.api.common.v2.StatusResponse|undefined} value
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse} returns this
*/
proto.scanoss.api.components.v2.CompSearchResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.components.v2.CompSearchResponse} returns this
 */
proto.scanoss.api.components.v2.CompSearchResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.components.v2.CompSearchResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.components.v2.CompVersionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.components.v2.CompVersionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.components.v2.CompVersionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    purl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.components.v2.CompVersionRequest}
 */
proto.scanoss.api.components.v2.CompVersionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.components.v2.CompVersionRequest;
  return proto.scanoss.api.components.v2.CompVersionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.components.v2.CompVersionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.components.v2.CompVersionRequest}
 */
proto.scanoss.api.components.v2.CompVersionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.components.v2.CompVersionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.components.v2.CompVersionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.components.v2.CompVersionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string purl = 1;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompVersionRequest.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompVersionRequest} returns this
 */
proto.scanoss.api.components.v2.CompVersionRequest.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.scanoss.api.components.v2.CompVersionRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.scanoss.api.components.v2.CompVersionRequest} returns this
 */
proto.scanoss.api.components.v2.CompVersionRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.components.v2.CompVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.components.v2.CompVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    component: (f = msg.getComponent()) && proto.scanoss.api.components.v2.CompVersionResponse.Component.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && scanoss_api_common_v2_scanoss$common_pb.StatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse}
 */
proto.scanoss.api.components.v2.CompVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.components.v2.CompVersionResponse;
  return proto.scanoss.api.components.v2.CompVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse}
 */
proto.scanoss.api.components.v2.CompVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.scanoss.api.components.v2.CompVersionResponse.Component;
      reader.readMessage(value,proto.scanoss.api.components.v2.CompVersionResponse.Component.deserializeBinaryFromReader);
      msg.setComponent(value);
      break;
    case 2:
      var value = new scanoss_api_common_v2_scanoss$common_pb.StatusResponse;
      reader.readMessage(value,scanoss_api_common_v2_scanoss$common_pb.StatusResponse.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.components.v2.CompVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.components.v2.CompVersionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.scanoss.api.components.v2.CompVersionResponse.Component.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      scanoss_api_common_v2_scanoss$common_pb.StatusResponse.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.components.v2.CompVersionResponse.License.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.License} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spdxId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isSpdxApproved: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.License}
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.components.v2.CompVersionResponse.License;
  return proto.scanoss.api.components.v2.CompVersionResponse.License.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.License} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.License}
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpdxId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSpdxApproved(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.components.v2.CompVersionResponse.License.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.License} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpdxId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsSpdxApproved();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.License} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string spdx_id = 2;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.getSpdxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.License} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.setSpdxId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_spdx_approved = 3;
 * @return {boolean}
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.getIsSpdxApproved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.License} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.setIsSpdxApproved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.License} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.License.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.components.v2.CompVersionResponse.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    licensesList: jspb.Message.toObjectList(msg.getLicensesList(),
    proto.scanoss.api.components.v2.CompVersionResponse.License.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Version}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.components.v2.CompVersionResponse.Version;
  return proto.scanoss.api.components.v2.CompVersionResponse.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Version}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = new proto.scanoss.api.components.v2.CompVersionResponse.License;
      reader.readMessage(value,proto.scanoss.api.components.v2.CompVersionResponse.License.deserializeBinaryFromReader);
      msg.addLicenses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.components.v2.CompVersionResponse.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLicensesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.scanoss.api.components.v2.CompVersionResponse.License.serializeBinaryToWriter
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Version} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated License licenses = 4;
 * @return {!Array<!proto.scanoss.api.components.v2.CompVersionResponse.License>}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.prototype.getLicensesList = function() {
  return /** @type{!Array<!proto.scanoss.api.components.v2.CompVersionResponse.License>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.components.v2.CompVersionResponse.License, 4));
};


/**
 * @param {!Array<!proto.scanoss.api.components.v2.CompVersionResponse.License>} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Version} returns this
*/
proto.scanoss.api.components.v2.CompVersionResponse.Version.prototype.setLicensesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.License=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.License}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.prototype.addLicenses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.scanoss.api.components.v2.CompVersionResponse.License, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Version} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.Version.prototype.clearLicensesList = function() {
  return this.setLicensesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.toObject = function(opt_includeInstance) {
  return proto.scanoss.api.components.v2.CompVersionResponse.Component.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.Component} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.toObject = function(includeInstance, msg) {
  var f, obj = {
    component: jspb.Message.getFieldWithDefault(msg, 1, ""),
    purl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    versionsList: jspb.Message.toObjectList(msg.getVersionsList(),
    proto.scanoss.api.components.v2.CompVersionResponse.Version.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Component}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.scanoss.api.components.v2.CompVersionResponse.Component;
  return proto.scanoss.api.components.v2.CompVersionResponse.Component.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.Component} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Component}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComponent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = new proto.scanoss.api.components.v2.CompVersionResponse.Version;
      reader.readMessage(value,proto.scanoss.api.components.v2.CompVersionResponse.Version.deserializeBinaryFromReader);
      msg.addVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.scanoss.api.components.v2.CompVersionResponse.Component.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.Component} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComponent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.scanoss.api.components.v2.CompVersionResponse.Version.serializeBinaryToWriter
    );
  }
};


/**
 * optional string component = 1;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.getComponent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Component} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.setComponent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string purl = 2;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.getPurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Component} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.setPurl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Component} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Version versions = 4;
 * @return {!Array<!proto.scanoss.api.components.v2.CompVersionResponse.Version>}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.getVersionsList = function() {
  return /** @type{!Array<!proto.scanoss.api.components.v2.CompVersionResponse.Version>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.scanoss.api.components.v2.CompVersionResponse.Version, 4));
};


/**
 * @param {!Array<!proto.scanoss.api.components.v2.CompVersionResponse.Version>} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Component} returns this
*/
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.setVersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.scanoss.api.components.v2.CompVersionResponse.Version=} opt_value
 * @param {number=} opt_index
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Version}
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.addVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.scanoss.api.components.v2.CompVersionResponse.Version, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse.Component} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.Component.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * optional Component component = 1;
 * @return {?proto.scanoss.api.components.v2.CompVersionResponse.Component}
 */
proto.scanoss.api.components.v2.CompVersionResponse.prototype.getComponent = function() {
  return /** @type{?proto.scanoss.api.components.v2.CompVersionResponse.Component} */ (
    jspb.Message.getWrapperField(this, proto.scanoss.api.components.v2.CompVersionResponse.Component, 1));
};


/**
 * @param {?proto.scanoss.api.components.v2.CompVersionResponse.Component|undefined} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse} returns this
*/
proto.scanoss.api.components.v2.CompVersionResponse.prototype.setComponent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.prototype.clearComponent = function() {
  return this.setComponent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.components.v2.CompVersionResponse.prototype.hasComponent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional scanoss.api.common.v2.StatusResponse status = 2;
 * @return {?proto.scanoss.api.common.v2.StatusResponse}
 */
proto.scanoss.api.components.v2.CompVersionResponse.prototype.getStatus = function() {
  return /** @type{?proto.scanoss.api.common.v2.StatusResponse} */ (
    jspb.Message.getWrapperField(this, scanoss_api_common_v2_scanoss$common_pb.StatusResponse, 2));
};


/**
 * @param {?proto.scanoss.api.common.v2.StatusResponse|undefined} value
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse} returns this
*/
proto.scanoss.api.components.v2.CompVersionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.scanoss.api.components.v2.CompVersionResponse} returns this
 */
proto.scanoss.api.components.v2.CompVersionResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.scanoss.api.components.v2.CompVersionResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.scanoss.api.components.v2);
