import { Model } from './Model';

import { Vulnerability } from './entity/Vulnerability';
import { ComponentVulnerability } from './entity/ComponentVulnerability';
import { ComponentVulnerability as gRPCComponentVulnerability } from './interfaces/ModelTypes';

const util = require('util');

export class VulnerabilityModel extends Model {
  public constructor(path: string) {
    super(path);
  }

  public async insertAll(vulnerability: Array<Vulnerability>): Promise<void> {
    return new Promise<void>(async (resolve) => {
      const db = await this.openDb();
      db.serialize(async () => {
        db.run('begin transaction');
        vulnerability.forEach((v) => {
          db.run(
            `INSERT OR IGNORE INTO vulnerability (CVE,source,severity,introduced,reported,patched,summary) VALUES(?,?,?,?,?,?,?);`,
            v.cve,
            v.source,
            v.severity,
            v.introduced,
            v.reported,
            v.patched,
            v.summary
          );
        });
        db.run('commit', (error) => {
          if (error) throw error;
          resolve();
        });
      });
    });
  }

  public insertComponentVulnerabilityFromGRPC(
    data: Array<gRPCComponentVulnerability> // TODO: reeplace ComponentVulnerability by gRPC proto
  ): Promise<void> {
    return new Promise<void>(async (resolve) => {
      const db = await this.openDb();
      db.serialize(async () => {
        db.run('begin transaction');
        data.forEach((d) => {
          const purl = d.purl.substring(0, d.purl.lastIndexOf('@'));
          const version = d.purl.substring(
            d.purl.lastIndexOf('@') + 1,
            d.purl.length
          );
          d.vulnerabilities.forEach((v) => {
            db.run(
              `INSERT INTO component_vulnerability (CVE,purl,version) VALUES (?,?,?);`,
              v.cve,
              purl,
              version
            );
          });
        });
        db.run('commit', (error) => {
          if (error) throw error;
          resolve();
        });
      });
    });
  }

  public async getAllDetected(): Promise<Array<ComponentVulnerability>> {
    const db = await this.openDb();
    const call = util.promisify(db.all.bind(db));
    const response = await call(`SELECT * FROM vulnerability v
            INNER JOIN component_vulnerability compv ON v.cve = compv.cve
            WHERE (compv.version,compv.purl) IN (SELECT version,purl FROM component_versions cv WHERE cv.source='engine')
            OR (compv.version,compv.purl) IN (SELECT version,purl FROM dependencies)`);
    return this.vulnerabilityAdapter(response);
  }

  public async getAllIdentified(): Promise<Array<ComponentVulnerability>> {
    const db = await this.openDb();
    const call = await util.promisify(db.all.bind(db));
    const response = await call(`SELECT * FROM vulnerability v
            INNER JOIN component_vulnerability compv ON v.cve = compv.cve
            INNER JOIN component_versions cv ON (cv.purl = compv.purl AND cv.version = compv.version)
            WHERE cv.id IN (SELECT cvid FROM inventories)`);
    return this.vulnerabilityAdapter(response);
  }

  public async getDetectedReport() {
    const db = await this.openDb();
    const call = await util.promisify(db.all.bind(db));
    const response =
      call(`SELECT v.severity, count(v.severity) as count FROM vulnerability v
            INNER JOIN component_vulnerability compv ON v.cve = compv.cve
            WHERE (compv.version,compv.purl) IN (SELECT version,purl FROM component_versions cv WHERE cv.source='engine')
            OR (compv.version,compv.purl) IN (SELECT version,purl FROM dependencies)
            GROUP BY v.severity;`);

    return response;
  }

  public async getIdentifiedReport() {
    const db = await this.openDb();
    const call = util.promisify(db.all.bind(db));
    const response =
      call(`SELECT v.severity, count(v.severity) as count FROM vulnerability v
            INNER JOIN component_vulnerability compv ON v.cve = compv.cve
            INNER JOIN component_versions cv ON (cv.purl = compv.purl AND cv.version = compv.version)
            WHERE cv.id IN (SELECT cvid FROM inventories)
            GROUP BY v.severity;`);
    return response;
  }

  private vulnerabilityAdapter(data: any): Array<ComponentVulnerability> {
    const componentVulnerability = data.map((cv) => {
      return {
        purl: cv.purl,
        version: cv.version,
        rejectAt: cv.rejectAt,
        vulnerability: {
          cve: cv.cve,
          source: cv.source,
          severity: cv.severity,
          introduced: cv.introduced,
          reported: cv.reported,
          patched: cv.patched,
          summary: cv.summary,
        },
      };
    });
    return componentVulnerability;
  }
}
