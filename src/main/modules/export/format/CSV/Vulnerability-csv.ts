import { Format } from '../../Format';
import { ExportSource, ExportStatusCode } from '../../../../../api/types';
import { ExportRepository } from '../../Repository/ExportRepository';
import { ComponentVulnerability } from '../../../../model/entity/ComponentVulnerability';
import { resolveVulnerabilityURL } from '../../helpers/exportHelper';
import { ExportRepositorySqliteImp } from '../../Repository/ExportRepositorySqliteImp';

/**
 * Exports component vulnerability data in CSV format.
 *
 * This class generates CSV reports containing vulnerability information for components
 * including PURL, version, vulnerability ID, CVE, source, severity, modification dates,
 * publication dates, and reference URLs. Supports both identified and detected vulnerability exports.
 */
export class VulnerabilityCsv extends Format {
  private source: string;

  /**
   * Creates an instance of VulnerabilityCsv.
   *
   * @param source - The export source type (ExportSource.IDENTIFIED or ExportSource.DETECTED)
   * @param repository - The repository instance for accessing vulnerability data (defaults to ExportRepositorySqliteImp)
   */
  constructor(source: string, repository: ExportRepository = new ExportRepositorySqliteImp()) {
    super(repository);
    this.source = source;
    this.extension = this.source === ExportSource.IDENTIFIED ? '-identified-vulnerability.csv' : '-detected-vulnerability.csv' ;
  }

  /**
   * Formats vulnerability data into CSV format.
   *
   * Converts an array of component vulnerabilities into a CSV string with headers and data rows.
   * Each row contains PURL, version, external ID, CVE, source, severity, modification date,
   * publication date, and a resolved URL to the vulnerability information.
   *
   * @param vulnerabilities - Array of component vulnerabilities to format
   * @returns CSV-formatted string with CRLF line endings
   */
  private formatVulnerabilitiesToCSV(vulnerabilities: Array<ComponentVulnerability>): string {
    let csv = 'purl,version,id,cve,source,severity,modified,published,url\n';

    vulnerabilities.forEach((v) => {
        const { vulnerability, purl, version } = v;
        const { cve, source, published, severity, modified, external_id } = vulnerability;
        const url = resolveVulnerabilityURL(source, cve);
        const row = `${purl},${version},${external_id},${cve},${source},${severity},${modified},${published},${url}\r\n`;
        csv += row;
    });

    return csv;
  }

  /**
   * Generates the vulnerability CSV report.
   *
   * Retrieves vulnerability data from the repository based on the configured source
   * (identified or detected) and formats it into a CSV report.
   *
   * @returns Promise resolving to ExportResult containing the CSV report string and success status
   * @override
   */
  public async generate() {
    const vulnerabilities = this.source === ExportSource.IDENTIFIED
      ? await this.repository.getIdentifiedVulnerability()
      : await this.repository.getDetectedVulnerability();
    const vulnerabilityCSV = this.formatVulnerabilitiesToCSV(vulnerabilities);
    return {
      report: vulnerabilityCSV,
      status: {
        code: ExportStatusCode.SUCCESS,
        info: {
          invalidPurls: [],
        },
      },
    };
  }
}
