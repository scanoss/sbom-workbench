import { Format } from '../../Format';
import { ExportSource, ExportStatusCode } from '../../../../../api/types';
import { ExportRepository } from '../../Repository/ExportRepository';
import { ComponentVulnerability } from '../../../../model/entity/ComponentVulnerability';
import { resolveVulnerabilityURL } from '../../helpers/exportHelper';

export class VulnerabilityCsv extends Format {
  private source: string;

  constructor(source: string, repository: ExportRepository) {
    super(repository);
    this.source = source;
    this.extension = this.source === ExportSource.IDENTIFIED ? '-identified-vulnerability.csv' : '-detected-vulnerability.csv' ;
  }

  private formatVulnerabilitiesToCSV(vulnerabilities: Array<ComponentVulnerability>): string {
    let csv = 'purl,version,id,cve,source,severity,modified,published,url\n';

    vulnerabilities.forEach((v) => {
        const { vulnerability, purl, version } = v;
        const { cve, source, published, severity, modified, external_id } = vulnerability;
        const url = resolveVulnerabilityURL(source, cve);
        const row = `${purl},${version},${external_id},${cve},${source},${severity},${modified},${published},${url}\r\n`;
        csv += row;
    });

    return csv;
  }

  // @override
  public async generate() {
    const vulnerabilities = this.source === ExportSource.IDENTIFIED
      ? await this.repository.getIdentifiedVulnerability()
      : await this.repository.getDetectedVulnerability();
    const vulnerabilityCSV = this.formatVulnerabilitiesToCSV(vulnerabilities);
    return {
      report: vulnerabilityCSV,
      status: {
        code: ExportStatusCode.SUCCESS,
        info: {
          invalidPurls: [],
        },
      },
    };
  }
}
